{"version":3,"sources":["variables/variables.jsx","components/Card.jsx","components/ClanList.jsx","components/AboutDetails.jsx","components/About.jsx","components/LeagueWar.jsx","components/LeagueRounds.jsx","components/LeagueGroup.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","serverURL","clanListTitles","clanId","clanLeagueTitles","clanLeagueWarTitles","days","Card","className","this","props","plain","hCenter","title","category","ctAllIcons","ctTableFullWidth","ctTableResponsive","ctTableUpgrade","content","legend","stats","statsIcon","Component","ClanList","state","clanUsers","expandedRow","console","log","fetch","then","response","json","dataClanUsers","setState","catch","rowId","currentExpandedRow","item","itemRows","onClick","handleRowClick","tag","key","clanRank","donations","donationsReceived","name","role","trophies","src","icon","alt","push","colspan","Object","keys","length","allItemRows","forEach","perItemRows","renderItem","concat","Container","fluid","Row","Col","md","Table","striped","hover","map","prop","AboutDetails","clanLevel","clanPoints","description","location","warWins","About","clanAbout","method","headers","Headers","dataClanAbout","JSON","parse","LeagueWar","leagueWar","warTag","nwt","replace","urlW","dataLeague","townhallLevel","mapPosition","listItems","attacks","d","attackerTag","stars","destructionPercentage","defenderTag","undefined","clan","members","allItemOpponentRows","opponent","oppRows","id","LeagueRounds","leagueGroupData","selectedWarTag","isLeagueWarVisible","warId","rounds","warTagItems0","rwt","warTags","warTagItems1","warTagItems2","warTagItems3","LeagueGroup","isDay1Visible","sort","a","b","townHallLevel","clans","Home","App","to","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0d90024a.chunk.js","sourcesContent":["var clanId = \"%2398URYYCP\";\nvar serverURL = \"https://cors-anywhere.herokuapp.com/http://132.145.254.115:8080\";\n\nconst clanListTitles = [\"ClanRank\", \"Donations\", \"Donations received\", \"Name\", \"Clan role\", \"Trophies\", \"League\"];\n\nconst clanLeagueTitles = [\"Name\", \"ClanLevel\", \"Tag\"];\n\nconst clanLeagueWarTitles = [\"Tag\", \"Name\", \"TownhallLevel\", \"MapPosition\"];\n\nconst days = [\"Day1\", \"День2\", \"Dag3\", \"Dzien4\", \"Tag5\", \"Giorno6\", \"Dia7\"];\n\nmodule.exports = {\n  serverURL,\n  clanListTitles,\n  clanId,\n  clanLeagueTitles,\n  clanLeagueWarTitles,\n  days\n};\n","import React, { Component } from \"react\";\n\nexport class Card extends Component {\n  render() {\n    return (\n      <div className={\"card\" + (this.props.plain ? \" card-plain\" : \"\")}>\n        <div className={\"header\" + (this.props.hCenter ? \" text-center\" : \"\")}>\n          <h4 className=\"title\">{this.props.title}</h4>\n          <p className=\"category\">{this.props.category}</p>\n        </div>\n        <div\n          className={\n            \"content\" +\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\n            (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\n            (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\n            (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\n          }\n        >\n          {this.props.content}\n\n          <div className=\"footer\">\n            {this.props.legend}\n            {this.props.stats != null ? <hr /> : \"\"}\n            <div className=\"stats\">\n              <i className={this.props.statsIcon} /> {this.props.stats}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\n\nimport Card from \"./Card.jsx\";\nimport { serverURL, clanListTitles, clanId } from \"../variables/variables.jsx\";\n\nclass ClanList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      clanUsers: [],\n      expandedRow: null\n    };\n  }\n\n  componentDidMount() {\n    console.log(clanId);\n    fetch(serverURL +  \"/clan/members?clanId=\" + clanId)\n      .then(response => response.json())\n      .then((dataClanUsers) => {\n        this.setState({ clanUsers: dataClanUsers })\n        //console.log(dataClanUsers)\n      })\n      //.then(dataClanUsers => this.setState({ clanUsers: dataClanUsers }))\n      .catch(console.log);\n  }\n\n\n  handleRowClick(rowId) {\n    const currentExpandedRow = this.state.expandedRow;\n\n    this.setState({ expandedRow: (rowId === currentExpandedRow) ? null : rowId })\n  }\n\n\n  renderItem(item) {\n    const clickCallback = () => this.handleRowClick(item.tag);\n\n    const itemRows = [\n                      <tr onClick={clickCallback} key={\"row-data-\" + item.tag}>\n                              <td>{item.clanRank}</td>\n                              <td>{item.donations}</td>\n                              <td>{item.donationsReceived}</td>\n                              <td>{item.name}</td>\n                              <td>{item.role}</td>\n                              <td>{item.trophies}</td>\n                              <td>            \n                                <div className=\"logo-img\">\n                          <img src={item.icon} alt=\"logo_image\" />\n                      </div>\n                    </td>                            \n                          </tr>\n     ];\n\n    if (this.state.expandedRow === item.tag) {\n      itemRows.push(\n        <tr>\n            <td colspan={Object.keys(this.state.clanUsers[0]).length}>\n              <div> {item.name} </div>\n            </td>\n        </tr>\n      );\n    }\n\n    return itemRows;\n  }\n\n  render() {\n\n    let allItemRows = [];\n\n        this.state.clanUsers.forEach(item => {\n            const perItemRows = this.renderItem(item);\n            allItemRows = allItemRows.concat(perItemRows);\n        });\n    \n    return (\n      <div className=\"content\">\n        <Container fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title=\"Clan Members\"\n                category=\"list of all clan members\"\n                ctTableFullWidth\n                ctTableResponsive\n                content={\n                  <Table striped hover>\n                    <thead>\n                      <tr>\n                        {clanListTitles.map((prop, key) => {\n                          return <th key={key}>{prop}</th>;\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {allItemRows}\n                    </tbody>\n                  </Table>\n                }\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default ClanList;\n","import React, {Component} from 'react';\n\nimport {\n  Container,\n  Row,\n  Col\n} from \"react-bootstrap\";\n\nclass AboutDetails extends Component {\n\n    render() {\n        return (\n                  <Container fluid>\n                          <Row>\n                            <Col md={2}>\n                              {this.props.clanLevel}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col md={2}>\n                              {this.props.item.clanPoints}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col md={2}>\n                              {this.props.item.description}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col md={2}>\n                              {this.props.item.name}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col md={2}>\n                              {this.props.item.location}\n                            </Col>\n                          </Row>\n                          <Row>\n                            <Col md={2}>\n                              {this.props.item.warWins}\n                            </Col>\n                          </Row>\n                      </Container>\n        );\n    }\n}\n\n\nexport default AboutDetails;\n","import React, {Component} from 'react';\n\nimport { serverURL, clanId } from \"../variables/variables.jsx\";\nimport AboutDetails from \"./AboutDetails.jsx\";\n\nclass About extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      clanAbout: {}\n    };\n  }\n\n  componentDidMount() {\n    //console.log(clanId);\n    fetch(serverURL +  \"/clan?clanId=\" + clanId, { \n   method: 'get', \n   headers: new Headers({\n     \"Origin\": null\n   })})\n      .then(response => response.json())\n      .then((dataClanAbout) => {\n        this.setState({ clanAbout: JSON.parse(dataClanAbout) })\n       // console.log(dataClanAbout)\n      })\n      //.then(dataClanUsers => this.setState({ clanUsers: dataClanUsers }))\n      .catch(console.log);\n  }\n\n   render() {\n\n        return (\n      <div className=\"content\">\n        {this.state.clanAbout.clanLevel}\n          <AboutDetails item={this.state.clanAbout} />\n      </div>\n        );\n    }\n\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\n\nimport Card from \"./Card.jsx\";\nimport { serverURL, clanLeagueWarTitles } from \"../variables/variables.jsx\";\n\nclass LeagueWar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      leagueWar: {},\n      warTag: props.warTag\n    };\n  }\n\n  componentDidMount() {\n    var nwt = this.state.warTag.replace(\"#\", \"%23\"); \n    console.log(nwt);\n    const urlW = serverURL +  \"/clan/league/war?warTag=\" + nwt;\n    console.log(urlW);\n    fetch(urlW)\n      .then(response => response.json())\n      .then((dataLeague) => {\n        this.setState({ leagueWar: dataLeague })\n        console.log(dataLeague)\n      })\n      //.then(dataClanUsers => this.setState({ clanUsers: dataClanUsers }))\n      .catch(console.log);\n   \n  }\n\n\n  handleRowClick(rowId) {\n    const currentExpandedRow = this.state.expandedRow;\n\n    this.setState({ expandedRow: (rowId === currentExpandedRow) ? null : rowId })\n  }\n\n\n  renderItem(item) {\n    const clickCallback = () => this.handleRowClick(item.tag);\n\n    const itemRows = [\n                      <tr onClick={clickCallback} key={\"row-data-\" + item.tag}>\n                              <td>{item.tag}</td>\n                              <td>{item.name}</td>\n                              <td>{item.townhallLevel}</td>                          \n                              <td>{item.mapPosition}</td>\n                          </tr>\n     ];\n\n    if (this.state.expandedRow === item.tag) {\n      const listItems = item.attacks.map((d) => <li key={d.attackerTag}><b>Stars {d.stars}</b>  {d.destructionPercentage} <b>Opponent: {d.defenderTag}</b></li>);\n      itemRows.push(\n        <div>\n          {listItems}\n       </div>\n      );\n    }\n\n    return itemRows;\n  }\n\n  render() {\n\n    if(this.state.leagueWar !== undefined && this.state.leagueWar.clan !== undefined && this.state.leagueWar.clan.members !== undefined) {\n\n    let allItemRows = [];\n\n          this.state.leagueWar.clan.members.forEach(item => {\n            const perItemRows = this.renderItem(item);\n            allItemRows = allItemRows.concat(perItemRows);\n        });\n\n    let allItemOpponentRows = [];\n\n        this.state.leagueWar.opponent.members.forEach(item => {\n            const oppRows = this.renderItem(item);\n            allItemOpponentRows = allItemOpponentRows.concat(oppRows);\n        });\n \n    \n    return (\n      <div className=\"content\">\n        <Container fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title={this.state.leagueWar.clan.stars + \"    stars Versus     \" + this.state.leagueWar.opponent.stars}\n                category={this.state.leagueWar.clan.attacks + \"    attacks Versus     \" + this.state.leagueWar.opponent.attacks}\n                ctTableFullWidth\n                ctTableResponsive\n                content={\n                  <div id=\"wrap\">\n                   <div className=\"container\">\n                   <Table striped hover>\n                    <thead>\n                      <tr>\n                        {clanLeagueWarTitles.map((prop, key) => {\n                          return <th key={key}>{prop}</th>;\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {allItemRows}\n                    </tbody>\n                  </Table>\n                    </div>\n                    <div className=\"container\">\n                  <Table striped hover>\n                    <thead>\n                      <tr>\n                        {clanLeagueWarTitles.map((prop, key) => {\n                          return <th key={key}>{prop}</th>;\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {allItemOpponentRows}\n                    </tbody>\n                  </Table>\n                    </div>\n                    </div>\n                }\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );      \n    } else {\n      return null\n    }\n\n  }\n}\n\nexport default LeagueWar;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\n\nimport Card from \"./Card.jsx\";\nimport LeagueWar from \"./LeagueWar.jsx\";\nimport { serverURL, clanId, days } from \"../variables/variables.jsx\";\n\nclass LeagueRounds extends Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      leagueGroupData: {},\n      leagueWar: [],\n      selectedWarTag: null,\n      isLeagueWarVisible: false\n    };\n  }\n\n  componentDidMount() {\n\n    fetch(serverURL +  \"/clan/league?clanId=\" + clanId)\n      .then(response => response.json())\n      .then((dataLeague) => {\n        this.setState({ leagueGroupData: JSON.parse(dataLeague) })      \n      })\n      //.then(dataClanUsers => this.setState({ clanUsers: dataClanUsers }))\n      .catch(console.log);\n  }\n\n  handleRowClick(warId) {\n    const currentExpandedRow = this.state.expandedRow;\n    this.setState({selectedWarTag: warId});\n    console.log(\"inside click\" + warId);\n    this.setState({ isLeagueWarVisible: !this.state.isLeagueWarVisible })\n\n  }\n\n  renderItem(item) {\n    if (item !== \"#0\"){\n      const clickCallback = () => this.handleRowClick(item);\n\n      return <td onClick={clickCallback} key={item}>{item}</td>;\n    } else {\n      return <td>\"No information yet\"</td>;\n    }\n  }\n\n\n  render() {\n\n   \n    if(this.state.leagueGroupData !== undefined && this.state.leagueGroupData.rounds !== undefined) {   \n\n    const warTagItems0 = this.state.leagueGroupData.rounds.map(rwt => {\n      return this.renderItem(rwt.warTags[0]);\n    });\n\n    const warTagItems1 = this.state.leagueGroupData.rounds.map(rwt => {\n      return this.renderItem(rwt.warTags[1]);\n    });\n\n    const warTagItems2 = this.state.leagueGroupData.rounds.map(rwt => {\n      return this.renderItem(rwt.warTags[2]);\n    });\n\n    const warTagItems3 = this.state.leagueGroupData.rounds.map(rwt => {\n      return this.renderItem(rwt.warTags[3]);\n    });\n                       \n \n    return (\n      <div className=\"content\">\n        <Container fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title=\"League War Round\"\n                category=\"Click to expand click again to hide - repeat :)\"\n                ctTableFullWidth\n                ctTableResponsive\n                content={\n                  <div>\n                      <div>\n                 <Table striped hover>\n                    <thead>\n                      <tr>\n                        {days.map((prop, key) => {\n                          return <th key={key}>{prop}</th>;\n                        })}\n                      </tr>\n                    </thead>\n                  <tbody>\n                      <tr>\n                      {warTagItems0}\n                        </tr>\n                      <tr>\n                      {warTagItems1}\n                        </tr>\n                      <tr>\n                      {warTagItems2}\n                        </tr>\n                      <tr>\n                      {warTagItems3}\n                        </tr>\n                       \n                      </tbody>\n                    </Table>\n                    </div>\n                    <div>\n                                {this.state.isLeagueWarVisible && <LeagueWar warTag={this.state.selectedWarTag} />}\n                                  </div>\n                      </div>\n                }\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );      \n      } else {return null}\n\n  }\n}\n\nexport default LeagueRounds;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\n\nimport Card from \"./Card.jsx\";\nimport LeagueRounds from \"./LeagueRounds.jsx\";\nimport { serverURL, clanId, clanLeagueTitles, days } from \"../variables/variables.jsx\";\n\nclass LeagueGroup extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      leagueGroupData: {},\n      leagueWar: [],\n      expandedRow: null,\n      isDay1Visible: false\n    };\n  }\n\n  componentDidMount() {\n\n    fetch(serverURL +  \"/clan/league?clanId=\" + clanId)\n      .then(response => response.json())\n      .then((dataLeague) => {\n        this.setState({ leagueGroupData: JSON.parse(dataLeague) })      \n      })\n      //.then(dataClanUsers => this.setState({ clanUsers: dataClanUsers }))\n      .catch(console.log);\n  }\n\n\n  handleRowClick(rowId) {\n    const currentExpandedRow = this.state.expandedRow;\n\n    this.setState({ expandedRow: (rowId === currentExpandedRow) ? null : rowId })\n  }\n\n\n  renderItem(item) {\n    const clickCallback = () => this.handleRowClick(item.tag);\n\n    const itemRows = [\n                      <tr onClick={clickCallback} key={\"row-data-\" + item.tag}>\n                              <td>{item.name}</td>\n                              <td>{item.clanLevel}</td>\n                              <td>{item.tag}</td>                          \n                          </tr>\n     ];\n\n    if (this.state.expandedRow === item.tag) {\n       item.members.sort((a, b) => a.townHallLevel > b.townHallLevel);\n      const listItems = item.members.map((d) => <li key={d.tag}>{d.name}  <b> {d.townHallLevel}</b></li>);\n      itemRows.push(\n        <div>\n          {listItems}\n       </div>\n      );\n    }\n\n    return itemRows;\n  }\n\n  render() {\n\n    if(this.state.leagueGroupData !== undefined && this.state.leagueGroupData.clans !== undefined) {\n\n    let allItemRows = [];\n\n        this.state.leagueGroupData.clans.forEach(item => {\n            const perItemRows = this.renderItem(item);\n            allItemRows = allItemRows.concat(perItemRows);\n        });\n\n    return (\n      <div className=\"content\">\n        <Container fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title=\"League clans\"\n                category=\"list of all clans in a league\"\n                ctTableFullWidth\n                ctTableResponsive\n                content={\n                  <Table striped hover>\n                    <thead>\n                      <tr>\n                        {clanLeagueTitles.map((prop, key) => {\n                          return <th key={key}>{prop}</th>;\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {allItemRows}\n                    </tbody>\n                  </Table>\n                }\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );      \n    } else {\n      return null\n    }\n\n  }\n}\n\nexport default LeagueGroup;\n","import React from 'react';\n//import logo from './logo.svg'\nimport './App.css';\nimport \"./assets/sass/light-bootstrap-dashboard-react.scss?v=1.3.0\";\nimport ClanList from \"./components/ClanList.jsx\";\nimport About from \"./components/About.jsx\";\nimport LeagueGroup from \"./components/LeagueGroup.jsx\";\nimport LeagueRounds from \"./components/LeagueRounds.jsx\";\n//import { Navbar } from \"react-bootstrap\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <ul id=\"menu\">\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/players\">Players</Link>\n          </li>\n          <li>\n            <Link to=\"/war\">Clan War</Link>\n          </li>\n          <li>\n            <Link to=\"/leaguegroup\">Clan League Group</Link>\n          </li>\n          <li>\n            <Link to=\"/leaguerounds\">Clan League Rounds</Link>\n          </li>\n\n        </ul>\n\n        <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/players\">\n            <ClanList />\n          </Route>\n          <Route path=\"/leaguegroup\">\n            <LeagueGroup />\n          </Route>\n          <Route path=\"/leaguerounds\">\n            <LeagueRounds />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/css/animate.min.css\";\nimport \"./assets/sass/light-bootstrap-dashboard-react.scss?v=1.3.0\";\nimport \"./assets/css/demo.css\";\nimport \"./assets/css/pe-icon-7-stroke.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}